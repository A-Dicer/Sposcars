{"version":3,"sources":["pages/Picks/poLogo.jpg","pages/Picks/Picks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","handleFormSubmit","event","preventDefault","console","log","window","history","className","id","src","poLogo","alt","Component","App","exact","path","component","Picks","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,kPCkD5BC,E,2MA/BbC,iBAAmB,SAAAC,GACjBA,EAAMC,kB,oFARNC,QAAQC,IAAIC,OAAOC,W,+BAcnB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,MAAMC,GAAG,SACtB,yBAAKD,UAAU,+BACb,yBAAKA,UAAU,qCAAqCC,GAAG,SACrD,yBAAKD,UAAU,sBACb,oDACA,yBAAKE,IAAKC,IAAQH,UAAU,gBAAgBI,IAAI,uB,GA3B5CC,aCQLC,EATH,kBACV,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,QCGrBC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0cd1ab13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/poLogo.47d69dee.jpg\";","import React, { Component } from \"react\";\n// import API from \"../../utils/API\";\nimport \"./Picks.css\";\nimport poLogo from \"./poLogo.jpg\";\n// import Icon from \"../../components/Icon\";\n\nclass Login extends Component {\n\n  componentWillMount() { \n    \n    const test = {Cars: 10, Boats: 2}\n    // window.history.pushState(test, \"page 2\")\n    console.log(window.history)\n    // API.logout().catch(err => console.log(err))\n  }\n\n// ---------------------------------------- handleFormSubmit -----------------------------------------------\n//Action for signing people in when button is pressed.\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    // window.location = \"http://localhost:3001/api/auth/twitch/callback\";\n  };\n\n// ----------------------------------------- Frontend Code -------------------------------------------------\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\" id=\"outer\">\n          <div className=\"col-sm-12 align-self-center\">\n            <div className=\"row justify-content-center rounded\" id=\"inner\">         \n              <div className=\"col-12 text-center\">\n                <h3>Punch-Out!! Splitter</h3>\n                <img src={poLogo} className=\"img-thumbnail\" alt=\"punch-out\"/> \n                {/* <button \n                  type=\"button\" \n                  className=\"btn btn-danger btn-sm loginBtn\" \n                  onClick={this.handleFormSubmit}\n                >    \n                   Log in with Twitch    <Icon id=\"fab fa-twitch\" />\n                </button>  */}\n              </div>\n            </div>\n          </div>\n        </div>     \n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Picks from \"./pages/Picks\";\n\n\nconst App = () =>\n  <Router>\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={Picks} />\n      </Switch>\n    </div>\n  </Router>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}